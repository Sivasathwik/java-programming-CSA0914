class MultiplicationTable extends Thread {
    private int number;

    MultiplicationTable(int number) {
        this.number = number;
    }

    public void run() {
        try {
            for (int i = 1; i <= 10; i++) {
                System.out.println(number + " * " + i + " = " + number * i);
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
            System.out.println("Thread " + number + " interrupted.");
        }
    }
}

public class ThreadLifeCycle {
    public static void main(String[] args) {
        MultiplicationTable table5 = new MultiplicationTable(5);
        MultiplicationTable table10 = new MultiplicationTable(10);

        System.out.println("Thread State (New): " + table5.getState());

        table5.start();
        table10.start();

        System.out.println("Thread State (Runnable): " + table5.getState());

        try {
            table5.join();
            table10.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("Thread State (Terminated): " + table5.getState());
    }
}
