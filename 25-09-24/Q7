class Customer {
    private int accountNo;
    private String accName;
    private double balance = 10000;

    public Customer(int accountNo, String accName) {
        this.accountNo = accountNo;
        this.accName = accName;
    }

    public synchronized void deposit(double amount) {
        System.out.println("Depositing " + amount);
        balance += amount;
        System.out.println("New Balance after deposit: " + balance);
        notify();
    }

    public synchronized void withdraw(double amount) {
        System.out.println("Attempting to withdraw " + amount);
        while (balance < amount) {
            System.out.println("Insufficient balance. Waiting for deposit...");
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println(e.getMessage());
            }
        }
        balance -= amount;
        System.out.println("Withdrawal successful. New balance: " + balance);
    }
}

public class BankOperations {
    public static void main(String[] args) {
        Customer customer = new Customer(12345, "John Doe");

        Thread withdrawThread = new Thread(() -> {
            customer.withdraw(15000);
        });

        Thread depositThread = new Thread(() -> {
            try {
                Thread.sleep(2000); // Simulating delay before deposit
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            customer.deposit(7000);
        });

        withdrawThread.start();
        depositThread.start();
    }
}
